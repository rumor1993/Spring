
package com.naver.myhome1.sample;
/*
	디자인패턴 이용하기
	Factory 패턴을 이용하는 방법으로 클라이언트에서 사용할 객체 생성을 캡슐화하여
	메서드의 매개변수에 따라 객체를 생성합니다.
	==> 내가 필요한 객체를 직접 생성하지 않고 단지 어떤 객체가 필요한지 BeanFactory에 요청하면
	BeanFactory가 생성하여 넘겨줍니다.
*/

import org.springframework.context.support.ClassPathXmlApplicationContext;

// 스프링을 이용하여 클래스 사이의 결합 상태를 느슨하게 만듭니다.
public class HelloApp_annotation {
	public static void main(String[] args) {
		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("com/naver/myhome1/sample/applicationContext.xml");
		
		MessageBeanImpl bean = (MessageBeanImpl) ctx.getBean("m");
		bean.sayHello();
		ctx.close();
		
		
		
		/*
			1. MessageBeanImpl.java에서 @Autowired 사용해 보기
				- @Autowired은 생성자나 메서드, 멤버변수 위에 모두 사용할 수 있습니다.
				- 자동 주입 기능을 사용하면 스프링 컨테이너는 알아서 의존 객체를 찾아서 주입해 줍니다.
				- 즉, 해당 타입에 할당할 수 있는 빈  객체를 찾아서 주입합니다.
				- @Autowired 애노테이션을 적용하면 반드시 주입할 의존 객체가 존재해야 합니다.
				- 만약 @Autowired가 붙은 객체가 메모리에 없다면 스프링 컨테이너가 NoSuchBeanDefinitionException을 발생시킵니다.
		
		*/
		

			
			
		
	}
}
